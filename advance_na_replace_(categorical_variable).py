# -*- coding: utf-8 -*-
"""Advance NA replace (Categorical Variable).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xojieverU-H5V1SqC47J-BhK8Jg1nKED

## DATA
"""

import random
import pandas as pd

obj = {}
for i in range(1, 21):
  obj['l' + str(i)] = [random.randrange(1, 3, 1) for i in range(100000)]

data = pd.DataFrame(obj, columns = obj.keys())

target = [random.randrange(1, 3, 1) for i in range(99000)]
nans = [None] * 1000
target_col = target + nans

data['target'] = target_col
data

"""## PREPARATION

Variables cannot have zero values. In case of binomial variables, these must have 1 and 2  values, not 0 and 1. 

This is because the formula for Pearson's product-moment correlation coefficient divides the covariance of X and Y by the product of their standard deviations. If Y has zero variance, its standard deviation is also zero.
"""

import pandas as pd
import numpy as np

yy = 'target'
data2 = data.dropna()
list_cor = []

for i in range(data2.shape[1]):
  a = round(np.corrcoef(pd.to_numeric(pd.Series(data2.iloc[:,i])), data2[yy])[0][1] , 2)
  list_cor.append(a)

list_cor = pd.Series(list_cor)
list_cor.index = data2.columns

y = list_cor.sort_values(ascending = False).index[0]
x = list_cor.sort_values(ascending = False).index[1]

y, x

from sklearn.linear_model import LogisticRegression

model = LogisticRegression().fit(np.array(data2[x]).reshape((-1, 1)), np.array(data2[y]).reshape((-1, 1)))

data[y+'_ii'] = np.nan

for i in range(data.shape[0]):
  if data[y][i] is None:
    a = model.predict(np.array(data[x][i]).reshape((-1, 1)))[0][0]
    data[y + '_ii'][i] = a
  else:
    data[y + '_ii'][i] = data[x][i]

data.tail()

data.drop(y, axis = 1, inplace = True)
data.rename(columns = {y+'_ii' : y}, inplace = True)

data.columns

"""## FUNCTION"""

def na_categ_replace(data, col_to_pred):

  from sklearn.linear_model import LogisticRegression
  import pandas as pd
  import numpy as np
  import warnings
  warnings.filterwarnings('ignore')

  col_to_pred = col_to_pred
  data2 = data.dropna()
  list_cor = []

  for i in range(data2.shape[1]):
    a = round(np.corrcoef(pd.to_numeric(pd.Series(data2.iloc[:,i])), data2[col_to_pred])[0][1] , 2)
    list_cor.append(a)

  list_cor = pd.Series(list_cor)
  list_cor.index = data2.columns

  y = list_cor.sort_values(ascending = False).index[0]
  x = list_cor.sort_values(ascending = False).index[1]

  model = LogisticRegression().fit(np.array(data2[x]).reshape((-1, 1)), np.array(data2[y]).reshape((-1, 1)))

  data[y + '_ii'] = np.nan

  for i in range(data.shape[0]):
    if data[y][i] is None:
      a = model.predict(np.array(data[x][i]).reshape((-1, 1)))[0][0]
      data[y + '_ii'][i] = a
    else:
      data[y + '_ii'][i] = data[x][i]

  data.drop(y, axis = 1, inplace = True)
  data.rename(columns = { y + '_ii' : y}, inplace = True)
  return data

na_categ_replace(data = data, col_to_pred='target')