# -*- coding: utf-8 -*-
"""Advance NA replacement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q5tS3jJJ24GpnOKQvRtFSQfPbQojFvoD

## DOWNLOAD DATA
"""

import pandas as pd

# ! wget https://archive.ics.uci.edu/ml/machine-learning-databases/00360/AirQualityUCI.zip
# ! unzip AirQualityUCI.zip

data = pd.read_csv('/content/AirQualityUCI.csv', sep = ";")
data.head()

"""## INPUTS"""

target = 'AH'
train_size = 0.7

"""## DATA CLEANING"""

data.drop(['Unnamed: 15',	'Unnamed: 16'], axis = 1, inplace = True)

cols = data.columns

for col in cols:
  if data[col].dtype != float:
    a = pd.to_numeric(data[col].str.replace(',', '.'), errors = 'ignore')
    data[col] = a
  else:
    data[col]

lista = []
for col in cols:
  if data[col].dtype != float:
    lista.append(data[col].name)

data.drop(lista, axis = 1, inplace = True)
data.dropna(inplace = True)

data

"""## Change AH variable in order to add NA's."""

target1 = list(data[target][:int(data.shape[0] * train_size)])
nans = [None] * (data.shape[0] - len(target1))
target_col = target1 + nans

data['target'] = target_col
data.drop(target, axis = 1, inplace = True)

data

"""## FUNCTION"""

def na_cuant_replace(data, col_to_pred):

  from sklearn.linear_model import LinearRegression
  import pandas as pd
  import numpy as np
  import warnings
  warnings.filterwarnings('ignore')

  data2 = data.dropna()
  # col_to_pred = 'target'
  list_cor = []

  for i in range(data2.shape[1]):
    a = round(np.corrcoef(pd.to_numeric(pd.Series(data2.iloc[:,i])), data2[col_to_pred])[0][1] , 2)
    list_cor.append(a)

  list_cor = pd.Series(list_cor)
  list_cor.index = data2.columns

  y = list_cor.sort_values(ascending = False).index[0]
  x = list_cor.sort_values(ascending = False).index[1]

  model = LinearRegression().fit(np.array(data2[x]).reshape((-1, 1)), np.array(data2[y]).reshape((-1, 1)))

  data[ y + '_ii' ] = np.nan

  for i in range(data.shape[0]):
    if np.isnan(data[y][i]):
      data[ y + '_ii'][i] = model.predict(np.array(data[x][i]).reshape((-1, 1)))[0][0]
    else:
      data[ y + '_ii'][i] = data[y][i]

  data.drop(y, axis = 1, inplace = True)
  data.rename(columns = { y + '_ii' : y}, inplace = True)
  return data

na_cuant_replace(data, 'target')